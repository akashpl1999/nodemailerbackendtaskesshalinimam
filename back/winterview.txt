
  Microservices allow developers to break down an application into smaller, 
  more manageable components that can be developed,
  deployed, and scaled independently of each other. 
  Each microservice is designed to perform a specific task or set of tasks, 
  and communicates with other microservices through well-defined APIs.

While there are tools and technologies that can be used to build and manage microservices, 
such as containerization platforms like Docker and Kubernetes, microservices themselves 
are not tools. They are a way of organizing code and designing software architecture that 
can offer benefits such as scalability, agility, and maintainability.



scalibilty , agility, maintainability,




DevOps is a software development methodology that emphasizes collaboration, communication, and automation between development and operations teams.
 The goal of DevOps is to deliver high-quality software quickly and efficiently, while ensuring that it meets the needs of the business and end users.

  In a DevOps environment, developers and operations personnel work closely together throughout the software development lifecycle, from planning and development to testing, deployment, and maintenance.
  They use a variety of tools and techniques to automate and streamline the
  software delivery process, including continuous integration and continuous deployment (CI/CD) pipelines,
   
   automated testing, and infrastructure as code (IaC).


    => vertion controler , ci, infrasture as code , cd, testing,monitorimg


   Let's say a software development team is working on a new application that needs to be deployed to a cloud-based infrastructure. They want to use DevOps practices to ensure 
   that the application is developed, tested, and deployed quickly and efficiently, while also ensuring that it meets the needs of the business and end users.

  Planning: The team starts by planning the project, including defining the scope, requirements, and timeline. They work with the operations team to identify the infrastructure and tools needed to deploy the application.

  Development: The developers use a version control system like Git to manage the codebase and collaborate on code changes. They use continuous integration tools like Jenkins to automatically build and test the application code whenever changes are made.

  Testing: The development team uses automated testing tools like Selenium or Appium to test the application for bugs, errors, and performance issues. They also perform manual testing to ensure that the application meets user requirements.

  Deployment: The team uses infrastructure as code tools like Terraform or CloudFormation to define and deploy the cloud-based infrastructure needed to run the application. They use continuous deployment tools like Ansible or Chef to automate the deployment process and ensure that the application is deployed consistently and reliably.

  Monitoring: The operations team uses monitoring tools like Nagios or Prometheus to monitor the performance of the application and infrastructure. They use logs and metrics to identify areas for improvement and optimize the application for performance and scalability.





What is a microservice architecture, and how does it differ from a monolithic architecture?
   
   this is technology in which the  the large applications are developed , by combination os mutliple function module , this are also called to services, this service are designed to per form perticular opertion , this service
    are commuincate with each other throuth,api gateways ,
     let take example that e-commerce websites  , in that microservice
    having  user service , order service , product service  are there, 
    we can see that eact servers are provide differt funtionality , 

     so this serivece are indepentdent and self-contained , 
     so it does not affects the fuctinality of the othres services
      as it is indendent each serivice can be easly scalble and high efficency 





    features of this


    loosly coupled  --indepented of each other

    high cohision - each sevice have perticular function opertion to perform,

    it provides high flexibility and scalibilty

    this can deployed independenty  (docker)

    this can be mangeble by small team,

    fast development


//////

A pipeline in software development refers to a series of automated processes 
that are used to build, test, and deploy software applications. A pipeline typically consists of a series of stages or steps that are executed in a specific order, with each step building on the output of the previous step.

Here are the typical stages of a software development pipeline:



Source Code Management: This stage involves the management of the application source code using a version control system such as Git.

Build and Compile: This stage involves the compilation of the source code into executable code using tools like Maven, Gradle, or Make.

Testing: This stage involves the execution of automated unit tests, integration tests, and acceptance tests to verify that the application works as expected.

Code Quality and Analysis: This stage involves the use of tools like SonarQube, Checkstyle, or PMD to check the code quality and ensure that it conforms to coding standards.

Deployment: This stage involves the packaging of the application into a deployable artifact and the deployment of the artifact to an environment such as development, staging, or production.

Monitoring: This stage involves the monitoring of the application in production using tools like Nagios, New Relic, or Datadog to ensure that it is functioning correctly and identify issues.

These stages can be automated using tools like Jenkins, GitLab, or CircleCI, which allow developers to create a continuous integration and continuous delivery (CI/CD) pipeline that automates 
the entire software development process. The benefits of a pipeline include faster software delivery, improved quality, and increased agility in responding to changing business requirements
    



MERN stack is a popular combination of technologies for building web applications, which stands for MongoDB, Express.js, React.js, and Node.js. Let's say we have a MERN stack application that we want to deploy using a DevOps pipeline.

Source Code Management: We use Git to manage the application source code. We create a Git repository for the application and set up a development branch and feature branches for developers to work on.

Build and Compile: We use a package manager like NPM or Yarn to install the application dependencies and build the application.

Testing: We use a testing framework like Jest or Mocha to write automated tests for the application. We write unit tests for individual components and integration tests to test the application as a whole.

Code Quality and Analysis: We use tools like ESLint, Prettier, and SonarQube to ensure that the application code is well-formatted, adheres to coding standards, and is free of bugs and security vulnerabilities.

Deployment: We use a deployment tool like Docker or Kubernetes to package the application and its dependencies into a containerized image that can be easily deployed to a cloud-based infrastructure. We define the infrastructure as code using tools like Terraform or CloudFormation to ensure that the infrastructure is consistent across environments.

Monitoring: We use tools like Prometheus, Grafana, or Datadog to monitor the application in production. We set up alerts to notify us if there are any issues with the application, and use logs and metrics to identify and troubleshoot issues.



What are some benefits of a microservices architecture?

     

How do microservices communicate with each other in a distributed system?

 =====>  sync async apigateways, event driven programing



What is an API Gateway, and how does it fit into a microservices architecture?


  api gateways acts as signal entry point for all the client request , it provides the routing of request to particular service and load balnacess(input traffic handle madodu),

   and also provides authntication and autrization to req send by client,

     for example to do purches functionalty, the client have make many 

     req like it shlud check the  user model to authticate and move onto

      purches components



      to over come from this this can be use




How do you handle authentication and authorization in a microservices architecture?

What is containerization, and how can it help with microservices deployment?

How do you ensure consistency and data integrity in a distributed system?

    ===>  by using distrubuted database like mongodb we can achive this

How do you handle failures and errors in a microservices architecture?

   ===> circuit breakes, centerlized logging and monitoring , health checks, 

What is service discovery, and how can it help with microservices deployment?

How do you design and implement a scalable and resilient microservices architecture?

How do you ensure that your microservices are loosely coupled and have high cohesion?

How do you test and monitor your microservices architecture?

How do you handle versioning and backward compatibility in a microservices architecture?

What are some common challenges and pitfalls of microservices, and how do you address them?

Have you worked with any specific microservices tools or frameworks, such as Kubernetes, Docker, or Istio? If so, can you describe your experience with them?

































ms sql templet






const express = require('express');
const cors = require('cors');
const sql = require('mssql');

const app = express();
app.use(cors());
app.use(express.json());

const config = {
  user: 'your_username',
  password: 'your_password',
  server: 'your_server_name',
  database: 'your_database_name',
};

app.get('/api/customers', async (req, res) => {
  try {
    let pool = await sql.connect(config);
    let result = await pool.request().query('SELECT * FROM Customers');
    res.send(result.recordset);
  } catch (err) {
    console.log(err);
    res.status(500).send('Something went wrong');
  }
});

app.post('/api/customers', async (req, res) => {
  try {
    let pool = await sql.connect(config);
    let result = await pool.request()
      .input('FirstName', sql.VarChar, req.body.FirstName)
      .input('LastName', sql.VarChar, req.body.LastName)
      .input('Age', sql.Int, req.body.Age)
      .query('INSERT INTO Customers (FirstName, LastName, Age) VALUES (@FirstName, @LastName, @Age)');
    res.send('Customer added successfully');
  } catch (err) {
    console.log(err);
    res.status(500).send('Something went wrong');
  }
});

app.put('/api/customers/:id', async (req, res) => {
  try {
    let pool = await sql.connect(config);
    let result = await pool.request()
      .input('id', sql.Int, req.params.id)
      .input('FirstName', sql.VarChar, req.body.FirstName)
      .input('LastName', sql.VarChar, req.body.LastName)
      .input('Age', sql.Int, req.body.Age)
      .query('UPDATE Customers SET FirstName = @FirstName, LastName = @LastName, Age = @Age WHERE id = @id');
    res.send('Customer updated successfully');
  } catch (err) {
    console.log(err);
    res.status(500).send('Something went wrong');
  }
});

app.delete('/api/customers/:id', async (req, res) => {
  try {
    let pool = await sql.connect(config);
    let result = await pool.request()
      .input('id', sql.Int, req.params.id)
      .query('DELETE FROM Customers WHERE id = @id');
    res.send('Customer deleted successfully');
  } catch (err) {
    console.log(err);
    res.status(500).send('Something went wrong');
  }
});

const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});



const express = require('express');
const cors = require('cors');
const sql = require('mssql');

const app = express();
app.use(cors());
app.use(express.json());

const config = {
  user: 'your_username',
  password: 'your_password',
  server: 'your_server_name',
  database: 'your_database_name',
};

app.get('/api/customers', function(req, res) {
  sql.connect(config, function(err) {
    if (err) {
      console.log(err);
      res.status(500).send('Something went wrong');
      return;
    }
    var request = new sql.Request();
    request.query('SELECT * FROM Customers', function(err, result) {
      if (err) {
        console.log(err);
        res.status(500).send('Something went wrong');
        return;
      }
      res.send(result.recordset);
    });
  });
});

app.post('/api/customers', function(req, res) {
  sql.connect(config, function(err) {
    if (err) {
      console.log(err);
      res.status(500).send('Something went wrong');
      return;
    }
    var request = new sql.Request();
    request.input('FirstName', sql.VarChar, req.body.FirstName);
    request.input('LastName', sql.VarChar, req.body.LastName);
    request.input('Age', sql.Int, req.body.Age);
    request.query('INSERT INTO Customers (FirstName, LastName, Age) VALUES (@FirstName, @LastName, @Age)', function(err, result) {
      if (err) {
        console.log(err);
        res.status(500).send('Something went wrong');
        return;
      }
      res.send('Customer added successfully');
    });
  });
});

app.put('/api/customers/:id', function(req, res) {
  sql.connect(config, function(err) {
    if (err) {
      console.log(err);
      res.status(500).send('Something went wrong');
      return;
    }
    var request = new sql.Request();
    request.input('id















/// google cloude plotform


it is cloude computing plotform and it provide the infrastuere  and is provide d from goole , it allws user to store the data in the google servers

and provide servies , to achtive the  relibility, high productivty, 




   cloude computing  is plotform used database and security , dyanmic scalblity of server, remote access to device,faster computation, reduce the cost and overhead
  


clodue service models

IAAS ==>infrasture as services here  you have manage the data, application, middlewere,o/s  and plotform provides server network stogre mange maduthe

PAAS ==>Plotform as service , all things are handle by plotform , you have to work on data application  , big application example were it notable  solve each require


SAAS==>software as services , allmagenged by sowter omly , work on  data



google cloude plotform:


  highly scalable
  cost efficetive
  custom mechine types
  serverless
  bigdata analisyts
  cloude ai
  api handle plotform
  internet of things



  CLOUD CDN  ARE THE EDGE CONNECTION IN WHICH IT PROVIDES ACCESS TO ALL RELIGINALS 



   1>computing ENGINE:

     Google Compute Engine (GCE) is a virtual machine (VM) hosting service provided by Google Cloud Platform (GCP). 
     It enables users to launch and manage virtual machines on Google's infrastructure. 
     GCE allows users to customize and control their VMs and provides access to various Google Cloud Platform services and APIs.

     IT IS IAAS infrastuere AS SERVICE


    > advntage

     scalbility , flexble pricing, security

   HERE WE LANCHES VIRTUAL MECHINE OUR this infrasture


   2> APP ENGINE :

     Google App Engine is a platform as a service (PaaS) 
     offered by Google Cloud Platform (GCP) 
     that allows developers to build and deploy web applications and APIs on Google's infrastructure. 
     It supports several programming languages, including Java, Python, PHP, Node.js, Ruby, and Go.


   adv:  scalibilty, clodue lood balncing(handle input trafic), easy depolyment, security

   PLATFORM AS infrastuere
   USED DEPLOY THE BAck end PART


   3> containrer ENGINE:

   Google Cloud Platform (GCP)
   
    provides several container engine services to deploy,  manage, and scale containerized applications. 

   The primary container engine service provided by GCP is Google Kubernetes Engine (GKE), 
    which is a fully managed Kubernetes service that simplifies 
    the deployment and management of containerized applications.
    To use GKE, you need to create a GKE cluster and configure it to run your containers.  
     You can then deploy your application to the cluster using Kubernetes manifests or YAML files, 



   this aRE GOOGLE KUBERINITEES ENGINE 
   THIS ARE USE TO DEPLOY MANGE AND SCALE THE CONTAINERIZED application
    IT WORKS ON MULTIPLE PLOTFROM

  
  
  
  
    4>CONTAINER REGISTRY:

    IT SUPORT  containrer ENGINE TO PERFORM THIS operation,



    5> CLOUDE FUNNCTION =>
        
         Google Cloud Functions is a serverless compute service offered by Google Cloud Platform (GCP).
         It enables developers to write and deploy lightweight, event-driven code that automatically scales as needed,
         without requiring the developer to manage any infrastructure.









 GOOGLE CLOUDE stogre AND services:



   1>CLOUDE STOREGE - Google Cloud Storage is a highly scalable and durable object storage service offered by Google Cloud Platform (GCP). 
           It allows you to store and retrieve data from anywhere on the internet, and provides a range of features such as high durability,
        strong data consistency, security, and easy integration with other GCP services.



   2>CLOUD BIGTABLE -Google Cloud Bigtable is a fully managed, highly scalable NoSQL database service offered by Google Cloud Platform (GCP).
    It is designed to handle massive volumes of data and support high-throughput, low-latency workloads, making it well-suited for applications that require fast and predictable performance, 
    such as time-series data, financial data, and IoT sensor data.

    WORK ON NO TABLE DATA , UNSTRURED DATABASE

   3>CLOUD DATASTORE- HIRARCIAL DATABASE

       Google Cloud Datastore is a NoSQL document database service offered by Google Cloud Platform (GCP). 
       It is designed to be a fully managed, scalable, and highly available database solution that can handle a wide range of data types,
        including structured, semi-structured, and unstructured data.



   4>CLOUD SQL -WORKS ON STRURED DATA

   Cloud SQL is a fully managed relational database service provided
    by Google Cloud Platform (GCP). It allows you to create, configure, and use SQL databases in a cloud environment without the need to manage any infrastructure.



   5>PERSISTENT DISK  -WHEN WE REMOVE HOST THE WILL BE AUMTICAL DELETED TO OVER COME FROM THIS WE UES THIS HERE IT NOT DELETES THE DATA










google cloude network,and service:



1>clodue virtual machine : handle apis 

Cloud virtual machines, also known as cloud instances, are
 virtual machines (VMs) that are created and hosted in a cloud environment.
  They are a key part of Infrastructure-as-a-Service (IaaS) offerings, 
  which allow users to rent virtualized hardware resources in the cloud.



2>clodue load balancing: i works on input trafic from difrent intsances
                  in order to scale appliction in both horizontal and verticaly,
         it mainly makes that it divertes trafic to differnt node to balnace  this         

 3>cloude CDN: content delivery network

   data lentancy improves,  

   if  i had data center in bangolore , the service to near to bongoler place are good, as distance incress , lentancy also increse it take time to feates data , to over
   come from this , it work, stores recent responese in edge connection  


4>cloude DNS: DOMAIN NAME services


  IT CONTROLS DOMAIN NAMES , IT GIVES ACCESS TO OTHRES  TO ACCESS  DATA , BASED ON DOMAIN NAMES

   IF WE WANT ACCESS DATA WE SHOLUD KNOW WHERE DOES THIS DATA RESISTES BY DOMAIMN NAME



   

  google security serivece:


   1> google resoures manger or cloude resourec manger :

       here this are delevpes strctures , in this strures  we put all of our resouces 

        it provides idea that whom we are given access
      

     2>   cloud  IAM : it inseures that user get access  how it get  

           Scalability: Cloud virtual machines can be quickly and easily scaled up or down in response to changing demand, allowing you to only pay for the resources you need.

Flexibility: You can choose from a wide range of instance types and sizes, each with its own unique configuration of CPU, memory, and storage.

Availability: Cloud providers typically offer high availability and fault tolerance features, ensuring that your virtual machines are always up and running.

Security: Cloud virtual machines are often more secure than traditional physical servers, with advanced security features like firewalls, intrusion detection, and encryption.

Cost-effectiveness: Because you only pay for what you use, cloud virtual machines can be a cost-effective solution for hosting your applications or services.

          in organization 
              we have  develeps team and  non deveers team ,as user you can give access to particular team of they neaded 



      3> cloude security scanners: it scans the entire application , web
        
        as the application having url and n number of virtual machines , and this are accessed by user with different resouces, this
         scannes  allof this to insures the security of the application

   4>
  clodue plotform security:it provides the security to entire application



google cloude mangemwnt and delvepment services:



mangemet tools:


     clode shell : this is use to communicate with application(googlr clode) through commdline,

     monitoring : this are application with are used  maointaring goole cloudes

     clode apis : { it is used to handle the apis}
     
     clode console: it is plotform were it shows the waht are the engines we used in our projects etc

     error handleing reportes: to handle the errs in clode app



delvepment tooles:

    clode sdk
    deployment mangers






heroku: like docker

Heroku -v   check installition

ls -as ~/.ssh  to check ssh keys connection


Heroku keys:add

no ssh keys ==> ssh keygen 

add code to git 

Heroku create "appname" =>> it provides url of applications

git add .
commit

git remort =>> heroku orgin 

git push Heroku








